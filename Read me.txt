Read me
BOD_WATCHER_Overlay_INFO Primordialis Overlay Split (v.5) This would be considered Beta since I have it working how I want but the look and way it behaves isn't perfect, there will be more updates.

5 .py files, 3 .bat files, 2 folders, 1 .json file, 1 png, 1 Read me.
Python: config.py, main.py, bod_parser.py, render.py, watcher.py
.bat files: run_once.bat, run_once_no_icons.bat, run_watch.bat 
Folders: _pycache_ , cells
Others:  Cell_mapping.json, Overlay.png.

INFO:
Open the canvas I just created (“Primordialis Overlay Split (v5) it has:

config.py (your paths + tunable)

bod_parser.py (reads/decompresses/parses.bod)

render.py (hex math, colors, icons, combos, PNG writing)

watcher.py (watchdog + debounce + checksum)

main.py (CLI: --once, --watch, --bod, --out, --no-icons)

_pycache_ ( To store data needed to run the Python scripts)

cells (folder holding all the cells images that are used in the render process to show what cells are on your build)

Overlay.PNG ( This is the image that will be changing along side your .bod file in your %appdata% - Roaming/Primordialis/save/player.bod  folder that the game uses.)

cells_mapping.json ( This is the .json script that tells the render the hex code in letters(Hart, SPIK, SEEK...)  for each cell and it also gives the file the cell png name which is in cells folder for each cell so the render can differ which is which)

.bat ( This is redundant, but used to run the scripts all of the Python scripts --watch will keep running while once you can make it keep running with 1 small edit or it will run once and close the program great for edits to the config.py file)
___________________________________________________________________________________________________________________________________________________________________________________________
Instructions: 
to start you can keep the files can be keeps anywhere that you want them, make sure to keep backups of all them just in case you do edits and don't know how to fix what went wrong if something goes wrong. Cells folder does need to be specified (write the path you have it in the config.py) >please do that. 
Here is the code for config.py- [\YOUR_USERNAME← is were to put your user folder name in, Its different for every computer.] This makes it were I don't have to restrict you to were the files can go, edit the paths in the code to be put into the config.py and the paths have to be in "" to work, it can also be in any folder you choose on any drive, you just have to reflect that in the path "C:\" is just the main drive for example.] - Fast way to get to >appdata hit> win+r to open >run and >paste this: 
%AppData%\primordialis\save  <   You can also >type: %appdata%  -into the folders dir area (address bar) at the top and hit Enter.
_____________________
Config.py↓ (paths full code)

 # Paths (change if yours differ)
BOD_PATH = r"C:\Users\YOUR_USERNAME\AppData\Roaming\Primordialis\save\player.bod"
OUTPUT_PNG = r"C:\Users\YOUR_USERNAME\AppData\Roaming\Primordialis\save\overlay.png"
TEMP_OUTPUT = OUTPUT_PNG + ".tmp"
ICONS_DIR = r"put path to cells folder here"   (example: "C:\Users\YOUR_USERNAME\Documents\Primordialis Overlay Mod"
MAPPING_JSON = r"C:\Users\\putfoldernamehere←\AppData\Roaming\Primordialis\save\cell_mapping.json"

Example:↓
C:\Users\YOUR_USERNAME←(Folder name)\AppData\Roaming\Primordialis\save
C:\Users\YOUR_USERNAME\Documents\Primordialis Overlay Mod
____________________

(The ones for appdata dir, they are able to also go were you want, but I have not done any testing outside the files path given, there is code that tells the render were the PNG is which I keep near the file its reading from, there is always a risk that the game updates and removes png and .json by steam so keep that in mind also.) Next the code was edited in VSCode, but it also can be edited in Notepad++ and just the normal Notepad will work also, but be careful in python indents are very important and messing with those will break the files, config.py has no indents because I expect that file to be touched and it was not needed, this was one of the reasons I split the code up instead of it being 1 files to run alone. I also think there is a way that I can code the file structure so no edits to paths are needed just proper file placement, but I like the modular ability of just editing the paths, its easy and can be very useful. 
_____________________________________________________________________________________________________________________________________________________________________________________________
OBS: 
So in obs to get the overlay working right now was a weird one since obs doesn't have a image system that allows live viewing, so I used obs slideshow to mimic a live image viewer, its not perfect and is slow, I did make a LUA for this but I have not tested it, its also a lua to edit the config with sliders and stiff for size orientation and so on, but that is a backburner idea. -Ok back on track, in obs make a slideshow, and at the bottom add the Overlay.png that is inside the appdata/Roaming/Primordialis/save  folder on your pc. Then change the settings:-

-Visibility Behavior: Always play even when not visible    ←( this one I think has to be so that its always reading the changes no matter what)
-Slide Mode: Automatic   ←( Has to be this)
-Transition: Fade     ←( choose what you want fade is just what I choose)
-Time Between Slides: 50 ms ← ( can change to anything 0.3 is set in the config, so that is the fastest it will go for now)
-Transition Speed: 50 ms        ← (^^)
-Playback Mode: Loop
-Bounding Size/Aspect Ratio: 800x800     ← ( This can be any size you choose, no matter how big or small it will not crop or cut the image, smaller make the cells smaller, bigger will make the cells bigger, the  "config.py" edits the crop size fit for the "render.py" to read .I don't know what will happen if the chosen res is not square, my guess nothing, but may make it look skew.)
_________________________________________________________________________________________________________________________________________________________________________________
Make .bat files if needed:
**Also have .bat for each that will allow for each type of run with settings, this allows for less input of code and more click and play. Here is the .bat code just in case there is a error.
**All files can be put into a notepad or text file and when you save to, add a .bat to the end instead of .txt and it will turn into a bat file.

\\ example(Start→@echo off
REM === Run overlay in watch mode ===
python main.py --watch← End
pause← End(if you want to keep the program running until you close it)
______________

@echo off
REM === Run overlay in watch mode ===
python main.py --watch
pause

@echo off
REM === Run overlay once ===
python main.py --once


@echo off
REM === Run overlay once without icons ===
python main.py --once --no-icons

(Save as .bat)

(The pause at the end of the code block in .bat is what keeps the command window open, so if you remove it from the any of the .bat the file will run once and close right away, great for testing one edit in the config, I have noticed editing the config when Watch.bat is running and waiting for the new .bod file to update after a edit, sometime the edit to config.py wont reflect until the -watch, -once, -no icon, command is closed and reopened.) Once the command window is closed that means the program is not running anymore and is not watching the .bod file for changes. >.bat files have to be what I named them, this is what tells the render which one we are using I had issues at first with the argsws for no icons. 

________________________________________________________________________________________________
How to run with code in PowerShell
Bash:↓
python main.py --once
# or
python main.py --watch


For faster loading you want it to skip icons (just colors) not quite working how I want it, add: Powershell 

python main.py --once --no-icons


___________________________________________________________________________________________________
Notes:
Config.py info -look for ( Primordialis config explained.md for a full breakdown of each setting)


Only functional additions vs your single-file script: argument parsing + --once/--watch modes and a --no-icons toggle. Everything else is a straight move into modules with identical logic.
Keep your existing cell_mapping.json and icons folder as-is.
You can still tweak parameters in config.py without touching code.
If you want, we can add more CLI overrides later (e.g., --hex-size, --rotate-steps ect).
If you want explicit colors for any cell, just add "color": "#RRGGBB" next to "icon" for that entry.